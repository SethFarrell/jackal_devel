<?xml version="1.0"?>

<launch>
  <arg name="jackal_port" default="/dev/ttyACM2" />
  <arg name="enable_ekf" default="$(optenv ENABLE_EKF false)"/>

  <include file="$(find jackal_description)/launch/description.launch" />

  <node pkg="jackal_base" type="jackal_node" name="jackal_node">
    <rosparam>
      # TODO: Specify these in code rather than here.
      require:
        publishers:
          - status
          - feedback
          - imu/data_raw
          - navsat/nmea_sentence
        subscribers:
          - cmd_drive
          #- wifi_connected
    </rosparam>
    <param name="port" value="$(arg jackal_port)" />
    <param name="wireless_interface" value="$(optenv JACKAL_WIRELESS_INTERFACE wlp2s0)" />
  </node>



  <!-- TODO: Eliminate this by compiling the necessary message definitions into jackal_base. -->
  <node pkg="rosserial_python" type="message_info_service.py" name="rosserial_message_info" />

  <!-- Translate Sentence messages from the MCU to NavSatFix messages -->
  <node pkg="nmea_navsat_driver" type="nmea_topic_driver" name="nmea_topic_driver" ns="navsat" />

  <!-- Filter raw gyro data into a usable IMU message -->
  <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter">
    <rosparam file="$(eval optenv('JACKAL_MAG_CONFIG', find('jackal_base')+'/config/mag_config_default.yaml'))" />
    <rosparam>
      gain: 0.1
      zeta: 0.001
      publish_tf: false
    </rosparam>
  </node>

  <!-- Differential controller and basic localization -->
  <!-- TODO: Need to modify control.launch in our workspace in docker image to include the correct yaml-->
  <!-- <include file="$(find jackal_control)/launch/control.launch" /> -->

  <rosparam command="load" file="/config/control.yaml" />

  <node name="controller_spawner" pkg="controller_manager" type="spawner"
        args="jackal_joint_publisher jackal_velocity_controller" />

  <group if="$(arg enable_ekf)" >
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
      <rosparam command="load" file="$(find jackal_control)/config/robot_localization.yaml" />
    </node>

    <arg name="gx5_enable" value="$(optenv JACKAL_GX5_IMU 0)"/>
    <arg name="microstrain_enable" value="$(optenv JACKAL_IMU_MICROSTRAIN 0)"/>
    <group if="$(eval gx5_enable | microstrain_enable)">
      <!-- Optionally load the configuration for the secondary GX5-family IMU -->
      <rosparam>
        ekf_localization:
          imu1: gx5/imu/data
          imu1_config: [false, false, false,
                      true, true, true,
                      false, false, false,
                      true, true, true,
                      false, false, false]
          imu1_differential: false
      </rosparam>
      <param name="ekf_localization/imu1" value="$(optenv JACKAL_IMU_MICROSTRAIN_NAME gx5)/imu/data"/>
    </group>
  </group>

  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find jackal_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="jackal_velocity_controller/cmd_vel"/>
  </node>

  <group if="$(optenv JACKAL_CONTROL_EXTRAS 0)" >
    <rosparam command="load" file="$(env JACKAL_CONTROL_EXTRAS_PATH)" />
  </group>



  <!-- Teleoperation via joystick and rviz interactive markers -->
  <include file="$(find jackal_control)/launch/teleop.launch" >
    <arg name="joy_dev" value="$(optenv JACKAL_JOY_DEVICE /dev/input/js0)" />
  </include>

  <!-- Diagnostic Aggregator for robot monitor usage -->
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
    <rosparam command="load" file="$(find jackal_base)/config/diagnostic_analyzers.yaml" />
  </node>

  <!-- Add Diagnostic Analyzers for ekf localization if enabled -->
  <group if="$(arg enable_ekf)">
    <node pkg="diagnostic_aggregator" type="add_analyzers" name="add_localization_analyzers">
      <rosparam command="load" file="$(find jackal_base)/config/localization_analyzers.yaml" />
    </node>
  </group>


<group ns="avt_cameras">

  <node name="image_proc" pkg="image_proc" type="image_proc" ns="camera3"/>
  <node name="image_proc" pkg="image_proc" type="image_proc" ns="camera4"/>

  <node name="camera3" pkg="avt_vimba_camera" type="mono_camera_node" output="screen">
    <param name="guid" value=""/>
    <param name="ip" value="10.0.3.3"/>
    <param name="camera_info_url" value="file:///config/calibration_camera3.yaml"/>
    <param name="frame_id" value="camera3"/>
    <param name="trig_timestamp_topic" value=""/>
    <param name="show_debug_prints" value="true"/>
    <param name="trigger_source" value="FixedRate"/>
    <param name="acquisition_mode" value="Continuous"/>
    <param name="acquisition_rate" value="10"/>
    <param name="pixel_format" value="BayerRG8"/>
    <param name="exposure" value="5000"/>
    <param name="gain" value="0"/>
    <param name="exposure_auto" value="Continuous"/>
    <param name="gain_auto" value="Continuous"/>
    <param name="whitebalance_auto" value="Continuous"/>
    <param name="binning_x" value="1"/>
    <param name="binning_y" value="1"/>
    <param name="decimation_x" value="1"/>
    <param name="decimation_y" value="1"/>
    <param name="x_offset" value="8"/>
    <param name="y_offset" value="9"/>
    <param name="width" value="1920"/>
    <param name="height" value="1440"/>
    <param name="stream_bytes_per_second" value="45000000"/>
   </node>

  <node name="camera4" pkg="avt_vimba_camera" type="mono_camera_node" output="screen">
    <param name="guid" value=""/>
    <param name="ip" value="10.0.4.4"/>
    <param name="camera_info_url" value="file:///config/calibration_camera4.yaml"/>
    <param name="frame_id" value="camera4"/>
    <param name="trig_timestamp_topic" value=""/>
    <param name="show_debug_prints" value="true"/>
    <param name="trigger_source" value="FixedRate"/>
    <param name="acquisition_mode" value="Continuous"/>
    <param name="acquisition_rate" value="10"/>
    <param name="pixel_format" value="BayerRG8"/>
    <param name="exposure" value="5000"/>
    <param name="gain" value="0"/>
    <param name="exposure_auto" value="Continuous"/>
    <param name="gain_auto" value="Continuous"/>
    <param name="whitebalance_auto" value="Continuous"/>
    <param name="binning_x" value="1"/>
    <param name="binning_y" value="1"/>
    <param name="decimation_x" value="1"/>
    <param name="decimation_y" value="1"/>
    <param name="x_offset" value="8"/>
    <param name="y_offset" value="9"/>
    <param name="width" value="1920"/>
    <param name="height" value="1440"/>
    <param name="stream_bytes_per_second" value="45000000"/>
   </node>


</group>

  <!-- frame_id originally vlp16_1 -->
  <arg name="vlp16_frame_id" default="velodyne" />
  <!-- <arg name="vlp16_device_ip" default="192.168.1.201" /> -->
  <arg name="vlp16_device_ip" default="192.168.1.201" />
  <arg name="vlp16_broadcast_ip" default="192.168.1.201" />
  <arg name="vlp16_port" default="2368" />
  <!-- Remaps /velodyne/velodyne points to /points_raw -->
  <remap from="/velodyne/velodyne_points" to="/points_raw" />

  <group ns="$(arg vlp16_frame_id)">

    <arg name="vlp16_manager" default="$(arg vlp16_frame_id)_nodelet_manager" />

    <node pkg="nodelet" type="nodelet"
      name="$(arg vlp16_manager)" args="manager" />

    <!-- load driver nodelet into it -->
    <node pkg="nodelet" type="nodelet" name="$(arg vlp16_manager)_driver"
      args="load velodyne_driver/DriverNodelet $(arg vlp16_manager)" >
    <param name="device_ip" value="$(arg vlp16_device_ip)" />
    <param name="frame_id" value="$(arg vlp16_frame_id)"/>
    <param name="model" value="VLP16"/>
    <param name="pcap" value=""/>
    <param name="port" value="$(arg vlp16_port)" />
    <param name="read_fast" value="false"/>
    <param name="read_once" value="false"/>
    <param name="repeat_delay" value="0.0"/>
    <param name="rpm" value="600.0"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="$(arg vlp16_manager)_cloud"
      args="load velodyne_pointcloud/CloudNodelet $(arg vlp16_manager)">
    <param name="calibration"
         value="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
    <param name="max_range" value="130.0"/>
    <param name="min_range" value="1.0"/>
    </node>

  </group>

  <arg name="port" default="/dev/ttyACM0" />
  <arg name="baud" default="38400" />
  <arg name="frame_id" default="gps" />
  <arg name="use_GNSS_time" default="False" />
  <arg name="time_ref_source" default="gps" />
  <arg name="useRMC" default="False" />

  <node name="nmea_serial_driver_node" pkg="nmea_navsat_driver" type="nmea_serial_driver" output="screen">
    <param name="port" value="$(arg port)"/>
    <param name="baud" value="$(arg baud)" />
    <param name="frame_id" value="$(arg frame_id)" />
    <param name="use_GNSS_time" value="$(arg use_GNSS_time)" />
    <param name="time_ref_source" value="$(arg time_ref_source)" />
    <param name="useRMC" value="$(arg useRMC)" />
  </node>


</launch>

